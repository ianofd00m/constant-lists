import React, { useState, useEffect } from 'react';
import { toast } from 'react-toastify';
import CardActionsModal from './CardActionsModal';
import './CardActionsModal.css';

// Transform icon component for double-faced cards
const TransformIcon = ({ size = 12, color = '#1976d2' }) => (
  <svg 
    version="1.1" 
    xmlns="http://www.w3.org/2000/svg" 
    width={size} 
    height={size * (32/23)} 
    viewBox="0 0 23 32"
    style={{ display: 'inline-block', verticalAlign: 'middle' }}
  >
    <path 
      fill={color} 
      d="M18.486 28.106c0 1.581-1.282 2.863-2.863 2.863h-12.762c-1.581 0-2.863-1.282-2.863-2.863v-20.157c0-1.581 1.282-2.863 2.863-2.863h2.028v-1.193c0-1.581 1.282-2.863 2.863-2.863h12.762c1.581 0 2.863 1.282 2.863 2.863v20.157c0 1.581-1.282 2.863-2.863 2.863h-2.028v1.193zM15.623 6.995h-12.762c-0.527 0-0.954 0.427-0.954 0.954v20.157c0 0.527 0.427 0.954 0.954 0.954h12.762c0.527 0 0.954-0.427 0.954-0.954v-20.157c0-0.527-0.427-0.954-0.954-0.954zM18.486 25.005h2.028c0.527 0 0.954-0.427 0.954-0.954v-20.157c0-0.527-0.427-0.954-0.954-0.954h-12.762c-0.527 0-0.954 0.427-0.954 0.954v1.193h8.826c1.581 0 2.863 1.282 2.863 2.863v17.056z"
    />
  </svg>
);

// Helper function to extract price from card data (reused from DeckViewEdit)
const extractPrice = (c) => {
  if (!c || typeof c !== "object") {
    return { price: null, source: "invalid_card_object", cardType: "unknown" };
  }

  // For research page, we use simpler price extraction since cards come directly from Scryfall
  const prices = c.prices || {};
  
  // Default to non-foil price, but could be enhanced later to support foil toggle
  let price = prices.usd || null;
  let source = "regular_usd";
  let cardType = "normal";
  
  return {
    price,
    source,
    isFoil: false,
    cardType,
  };
};

// Move CardPreview to top-level so useState works
function CardPreview({ card, nameStyle, isDoubleFacedCard }) {
  const [show, setShow] = useState(false);
  
  // Check if this is a double-faced card
  const isDoubleFaced = isDoubleFacedCard ? isDoubleFacedCard(card) : false;
  
  // Get image URLs for both sides if double-faced
  const getFrontImageUrl = () => {
    if (isDoubleFaced && card.card_faces?.[0]?.image_uris?.normal) {
      return card.card_faces[0].image_uris.normal;
    }
    return card.image_uris?.normal;
  };
  
  const getBackImageUrl = () => {
    if (isDoubleFaced && card.card_faces?.[1]?.image_uris?.normal) {
      return card.card_faces[1].image_uris.normal;
    }
    return null;
  };
  
  const frontImageUrl = getFrontImageUrl();
  const backImageUrl = getBackImageUrl();
  
  return (
    <span style={{ position: 'relative' }}
      onMouseEnter={() => setShow(true)}
      onMouseLeave={() => setShow(false)}
    >
      <span style={nameStyle ? nameStyle : { textDecoration: 'underline', cursor: 'pointer' }}>
        {card.name}
      </span>
      {show && frontImageUrl && (
        <div style={{
          position: 'absolute',
          top: 24,
          left: 0,
          zIndex: 10,
          display: 'flex',
          gap: '8px',
          background: '#fff',
          padding: '8px',
          borderRadius: 8,
          boxShadow: '0 4px 16px rgba(0,0,0,0.25)',
        }}>
          <img
            src={frontImageUrl}
            alt={`${card.name} - Front`}
            style={{
              width: 200,
              height: 'auto',
              borderRadius: 4,
            }}
          />
          {isDoubleFaced && backImageUrl && (
            <img
              src={backImageUrl}
              alt={`${card.name} - Back`}
              style={{
                width: 200,
                height: 'auto',
                borderRadius: 4,
              }}
            />
          )}
        </div>
      )}
    </span>
  );
}

// Add to Shopping Cart function
function addToShoppingCart(card) {
  try {
    const existingCart = localStorage.getItem('shoppingCart');
    let cartItems = existingCart ? JSON.parse(existingCart) : [];
    
    // Check if card is already in cart
    const existingItemIndex = cartItems.findIndex(item => item.id === card.id);
    
    if (existingItemIndex !== -1) {
      // Increment quantity if card already exists
      cartItems[existingItemIndex].quantity = (cartItems[existingItemIndex].quantity || 1) + 1;
      toast.success(`Increased ${card.name} quantity to ${cartItems[existingItemIndex].quantity} in shopping cart`);
    } else {
      // Add new item to cart
      const cartItem = {
        id: card.id,
        name: card.name,
        set_name: card.set_name,
        type_line: card.type_line,
        image_url: card.image_uris?.normal,
        price: card.prices?.usd || '0.00',
        quantity: 1,
        scryfall_id: card.id
      };
      cartItems.push(cartItem);
      toast.success(`Added ${card.name} to shopping cart`);
    }
    
    localStorage.setItem('shoppingCart', JSON.stringify(cartItems));
    // Dispatch event to update navbar cart counter
    window.dispatchEvent(new CustomEvent('cartUpdated'));
  } catch (error) {
    console.error('Error adding to shopping cart:', error);
    toast.error('Failed to add card to shopping cart');
  }
}

  const getCurrentPrice = () => {
    if (!selectedPrinting?.prices) return null;
    
    const prices = selectedPrinting.prices;
    const finishes = selectedPrinting.finishes || [];
    
    const printingIsFoilOnly = 
      (selectedPrinting.foil === true && selectedPrinting.nonfoil === false) ||
      (finishes.includes('foil') && !finishes.includes('nonfoil'));
    
    let priceToUse;
    
    if (printingIsFoilOnly) {
      if (finishes.includes('etched') || selectedPrinting.frame_effects?.includes('etched')) {
        priceToUse = prices.usd_etched || prices.usd_foil || prices.usd || null;
      } else {
        priceToUse = prices.usd_foil || prices.usd || null;
      }
    } else if (isFoil) {
      if (finishes.includes('etched') || selectedPrinting.frame_effects?.includes('etched')) {
        priceToUse = prices.usd_etched || prices.usd_foil || prices.usd || null;
      } else {
        priceToUse = prices.usd_foil || prices.usd || null;
      }
    } else {
      priceToUse = prices.usd || null;
    }
    
    return priceToUse;
  };

  // Fetch all printings for the card
  const fetchPrintings = async (cardName) => {
    if (!cardName) return;
    
    setLoading(true);
    try {
      const apiUrl = import.meta.env.VITE_API_URL;
      const isDev = import.meta.env.DEV;
      const url = `/api/cards/search?q=${encodeURIComponent(`!"${cardName}"`)}`;
      const finalUrl = isDev ? url : `${apiUrl}${url}`;
      
      const response = await fetch(finalUrl);
      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
      
      const data = await response.json();
      const allFetchedPrintings = data.data || [];
      
      if (allFetchedPrintings.length === 0) {
        throw new Error('No printings found for this card.');
      }
      
      // Store all printings and show first 20 initially
      const initialPrintings = allFetchedPrintings.slice(0, 20);
      setAllPrintings(allFetchedPrintings);
      setPrintings(initialPrintings);
      setVisiblePrintings(initialPrintings.length);
      
      // Select the original card's printing if found, or first printing
      const originalPrinting = allFetchedPrintings.find(p => p.id === card.id) || allFetchedPrintings[0];
      setSelectedPrinting(originalPrinting);
      
      console.log(`[Research Modal] Found ${allFetchedPrintings.length} printings, selected: ${originalPrinting.set?.toUpperCase()} #${originalPrinting.collector_number}`);
      
    } catch (error) {
      console.error('Failed to fetch card printings:', error);
      setPrintings([]);
      setAllPrintings([]);
      setSelectedPrinting(card); // Fallback to original card
    } finally {
      setLoading(false);
    }
  };

  // Initialize modal when opened
  useEffect(() => {
    if (isOpen && card) {
      const cardName = card.name;
      
      // Reset state
      setPrintings([]);
      setAllPrintings([]);
      setSelectedPrinting(card);
      setQuantity(1);
      setSelectedDeck('');
      setAddingToDeck(false);
      
      // Determine initial foil status and constraints
      const scryfallData = card;
      const finishes = scryfallData.finishes || [];
      const hasNonFoilFinish = finishes.includes('nonfoil');
      const hasFoilFinish = finishes.includes('foil') || finishes.includes('etched');
      
      const cardIsFoilOnly = hasFoilFinish && !hasNonFoilFinish;
      const cardIsNonFoilOnly = hasNonFoilFinish && !hasFoilFinish;
      
      setIsFoilOnly(cardIsFoilOnly);
      setIsNonFoilOnly(cardIsNonFoilOnly);
      
      // Set initial foil status
      if (cardIsFoilOnly) {
        setIsFoil(true);
      } else if (cardIsNonFoilOnly) {
        setIsFoil(false);
      } else {
        setIsFoil(false); // Default to non-foil for cards with both finishes
      }
      
      // Fetch all printings
      fetchPrintings(cardName);
    }
  }, [isOpen, card]);

  // Load more printings
  const loadMorePrintings = () => {
    const newVisibleCount = Math.min(visiblePrintings + 20, allPrintings.length);
    setVisiblePrintings(newVisibleCount);
    setPrintings(allPrintings.slice(0, newVisibleCount));
  };

  // Handle printing selection
  const handleSelectPrinting = (printing) => {
    if (selectedPrinting?.id === printing.id) return;
    
    setSelectedPrinting(printing);
    
    // Update foil constraints based on new printing
    const finishes = printing.finishes || [];
    const hasNonFoilFinish = finishes.includes('nonfoil');
    const hasFoilFinish = finishes.includes('foil') || finishes.includes('etched');
    
    const printingIsFoilOnly = hasFoilFinish && !hasNonFoilFinish;
    const printingIsNonFoilOnly = hasNonFoilFinish && !hasFoilFinish;
    
    setIsFoilOnly(printingIsFoilOnly);
    setIsNonFoilOnly(printingIsNonFoilOnly);
    
    // Auto-adjust foil status if printing constrains it
    if (printingIsFoilOnly && !isFoil) {
      setIsFoil(true);
    } else if (printingIsNonFoilOnly && isFoil) {
      setIsFoil(false);
    }
  };

  // Handle foil toggle
  const handleFoilChange = (e) => {
    if (isFoilOnly || isNonFoilOnly) return;
    
    const newFoilStatus = !!e.target.checked;
    setIsFoil(newFoilStatus);
    setUserIsToggling(true);
    
    setTimeout(() => setUserIsToggling(false), 500);
  };

  // Handle quantity changes
  const handleQuantityChange = (e) => {
    setQuantity(parseInt(e.target.value));
  };

  const incrementQuantity = () => {
    setQuantity(prev => Math.min(prev + 1, 10));
  };

  const decrementQuantity = () => {
    setQuantity(prev => Math.max(prev - 1, 1));
  };

  // Handle add to deck with selected printing and options
  const handleAddToDeck = async () => {
    if (!selectedDeck) {
      toast.error('Please select a deck');
      return;
    }

    setAddingToDeck(true);
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        toast.error('Please log in to add cards to decks');
        setAddingToDeck(false);
        return;
      }

      const apiUrl = import.meta.env.VITE_API_URL;
      
      // Add cards based on quantity, with printing and foil info
      const addPromises = [];
      for (let i = 0; i < quantity; i++) {
        addPromises.push(
          fetch(`${apiUrl || ''}/api/decks/${selectedDeck}/cards`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify({
              scryfall_id: selectedPrinting.id,
              count: 1,
              foil: isFoil,
              printing: selectedPrinting.id
            })
          })
        );
      }

      const responses = await Promise.all(addPromises);
      const allSuccessful = responses.every(response => response.ok);

      if (allSuccessful) {
        const selectedDeckObj = userDecks.find(deck => deck._id === selectedDeck);
        const quantityText = quantity > 1 ? ` (${quantity}x)` : '';
        const foilText = isFoil ? ' [Foil]' : '';
        const printingText = selectedPrinting.set ? ` (${selectedPrinting.set.toUpperCase()})` : '';
        
        toast.success(`Added ${selectedPrinting.name}${quantityText}${foilText}${printingText} to ${selectedDeckObj?.name || 'deck'}`);
        onClose();
      } else {
        const errorData = await responses[0].json().catch(() => ({ msg: 'Unknown error' }));
        toast.error(`Failed to add card to deck: ${errorData.msg || 'Unknown error'}`);
      }
    } catch (error) {
      console.error('Error adding card to deck:', error);
      toast.error('Failed to add card to deck');
    } finally {
      setAddingToDeck(false);
    }
  };

  // Handle add to shopping cart with selected options
  const handleAddToShoppingCart = () => {
    try {
      const existingCart = localStorage.getItem('shoppingCart');
      let cartItems = existingCart ? JSON.parse(existingCart) : [];
      
      // Create unique ID based on printing and foil status
      const uniqueId = `${selectedPrinting.id}-${isFoil ? 'foil' : 'nonfoil'}`;
      const existingItemIndex = cartItems.findIndex(item => item.uniqueId === uniqueId);
      
      if (existingItemIndex !== -1) {
        cartItems[existingItemIndex].quantity = (cartItems[existingItemIndex].quantity || 1) + quantity;
        toast.success(`Increased ${selectedPrinting.name} quantity to ${cartItems[existingItemIndex].quantity} in shopping cart`);
      } else {
        const currentPrice = getCurrentPrice();
        const cartItem = {
          id: selectedPrinting.id,
          uniqueId: uniqueId,
          name: selectedPrinting.name,
          set_name: selectedPrinting.set_name,
          type_line: selectedPrinting.type_line,
          image_url: selectedPrinting.image_uris?.normal,
          price: currentPrice || '0.00',
          quantity: quantity,
          scryfall_id: selectedPrinting.id,
          foil: isFoil,
          printing: selectedPrinting.set?.toUpperCase() + (selectedPrinting.collector_number ? ` #${selectedPrinting.collector_number}` : '')
        };
        cartItems.push(cartItem);
        
        const quantityText = quantity > 1 ? ` (${quantity}x)` : '';
        const foilText = isFoil ? ' [Foil]' : '';
        const printingText = selectedPrinting.set ? ` (${selectedPrinting.set.toUpperCase()})` : '';
        
        toast.success(`Added ${selectedPrinting.name}${quantityText}${foilText}${printingText} to shopping cart`);
      }
      
      localStorage.setItem('shoppingCart', JSON.stringify(cartItems));
      window.dispatchEvent(new CustomEvent('cartUpdated'));
    } catch (error) {
      console.error('Error adding to shopping cart:', error);
      toast.error('Failed to add card to shopping cart');
    }
  };

  if (!isOpen || !card) return null;

  return (
    <div 
      style={{
        position: 'fixed',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        backgroundColor: 'rgba(0, 0, 0, 0.7)',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        zIndex: 1000,
        padding: '20px'
      }}
      onClick={(e) => {
        if (e.target === e.currentTarget) onClose();
      }}
    >
      <div style={{
        backgroundColor: 'white',
        borderRadius: '12px',
        maxWidth: '1000px',
        width: '100%',
        maxHeight: '90vh',
        overflow: 'hidden',
        boxShadow: '0 25px 50px -12px rgba(0, 0, 0, 0.25)',
        display: 'flex',
        flexDirection: 'column'
      }}>
        {/* Modal Header */}
        <div style={{
          padding: '24px',
          borderBottom: '1px solid #e5e7eb',
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center',
          flexShrink: 0
        }}>
          <div>
            <h2 style={{ margin: '0 0 8px 0', fontSize: '24px', fontWeight: '600' }}>
              {selectedPrinting?.name || card.name}
            </h2>
            <div style={{ fontSize: '14px', color: '#6b7280' }}>
              {selectedPrinting?.type_line || card.type_line} • {selectedPrinting?.set_name || card.set_name}
            </div>
          </div>
          <button
            onClick={onClose}
            style={{
              background: 'none',
              border: 'none',
              fontSize: '28px',
              cursor: 'pointer',
              color: '#6b7280',
              padding: '0',
              lineHeight: 1
            }}
          >
            ×
          </button>
        </div>

        {/* Modal Body */}
        <div style={{ 
          display: 'flex', 
          flex: 1, 
          overflow: 'hidden'
        }}>
          {/* Left Panel - Controls */}
          <div style={{
            width: '300px',
            padding: '24px',
            borderRight: '1px solid #e5e7eb',
            overflowY: 'auto',
            flexShrink: 0
          }}>
            {/* Foil Toggle */}
            <div style={{ marginBottom: '24px' }}>
              <label style={{ 
                display: 'block', 
                fontSize: '14px', 
                fontWeight: '500', 
                marginBottom: '8px' 
              }}>
                Foil:
                {isFoilOnly && <span style={{ color: '#fbbf24', marginLeft: '8px' }}>(Foil Only)</span>}
                {isNonFoilOnly && <span style={{ color: '#6b7280', marginLeft: '8px' }}>(Non-Foil Only)</span>}
              </label>
              <label style={{
                display: 'flex',
                alignItems: 'center',
                cursor: (isFoilOnly || isNonFoilOnly) ? 'not-allowed' : 'pointer',
                opacity: (isFoilOnly || isNonFoilOnly) ? 0.6 : 1
              }}>
                <input
                  type="checkbox"
                  checked={isFoil}
                  onChange={handleFoilChange}
                  disabled={isFoilOnly || isNonFoilOnly}
                  style={{
                    width: '40px',
                    height: '20px',
                    marginRight: '12px',
                    accentColor: '#f59e0b'
                  }}
                />
                <span style={{ fontSize: '14px' }}>
                  {isFoil ? 'Foil' : 'Non-foil'}
                </span>
              </label>
            </div>

            {/* Quantity Controls */}
            <div style={{ marginBottom: '24px' }}>
              <label style={{ 
                display: 'block', 
                fontSize: '14px', 
                fontWeight: '500', 
                marginBottom: '8px' 
              }}>
                Quantity:
              </label>
              <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                <button
                  onClick={decrementQuantity}
                  disabled={quantity <= 1}
                  style={{
                    width: '32px',
                    height: '32px',
                    border: '1px solid #d1d5db',
                    borderRadius: '6px',
                    background: 'white',
                    cursor: quantity <= 1 ? 'not-allowed' : 'pointer',
                    fontSize: '18px',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center'
                  }}
                >
                  −
                </button>
                <select
                  value={quantity}
                  onChange={handleQuantityChange}
                  style={{
                    flex: 1,
                    padding: '6px 8px',
                    border: '1px solid #d1d5db',
                    borderRadius: '6px',
                    fontSize: '14px'
                  }}
                >
                  {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(num => (
                    <option key={num} value={num}>{num}</option>
                  ))}
                </select>
                <button
                  onClick={incrementQuantity}
                  disabled={quantity >= 10}
                  style={{
                    width: '32px',
                    height: '32px',
                    border: '1px solid #d1d5db',
                    borderRadius: '6px',
                    background: 'white',
                    cursor: quantity >= 10 ? 'not-allowed' : 'pointer',
                    fontSize: '18px',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center'
                  }}
                >
                  +
                </button>
              </div>
            </div>

            {/* Price Display */}
            {selectedPrinting && (
              <div style={{ 
                marginBottom: '24px',
                padding: '12px',
                backgroundColor: '#f9fafb',
                borderRadius: '8px'
              }}>
                <div style={{ fontSize: '14px', fontWeight: '500', marginBottom: '4px' }}>
                  Price: {(() => {
                    const currentPrice = getCurrentPrice();
                    return currentPrice ? `$${Number(currentPrice).toFixed(2)}` : 'N/A';
                  })()}
                </div>
                {quantity > 1 && (() => {
                  const currentPrice = getCurrentPrice();
                  if (currentPrice) {
                    const totalPrice = (Number(currentPrice) * quantity).toFixed(2);
                    return (
                      <div style={{ fontSize: '12px', color: '#6b7280' }}>
                        Total: ${totalPrice} ({quantity}x)
                      </div>
                    );
                  }
                  return null;
                })()}
              </div>
            )}

            {/* Action Buttons */}
            <div style={{ display: 'flex', flexDirection: 'column', gap: '12px' }}>
              {/* Add to Shopping Cart */}
              <button
                onClick={handleAddToShoppingCart}
                style={{
                  backgroundColor: '#059669',
                  color: 'white',
                  border: 'none',
                  padding: '12px 16px',
                  borderRadius: '8px',
                  fontSize: '14px',
                  fontWeight: '500',
                  cursor: 'pointer',
                  transition: 'background-color 0.2s'
                }}
                onMouseEnter={(e) => e.target.style.backgroundColor = '#047857'}
                onMouseLeave={(e) => e.target.style.backgroundColor = '#059669'}
              >
                🛒 Add to Shopping Cart
              </button>

              {/* Add to Deck */}
              {userDecks && userDecks.length > 0 && (
                <>
                  <select
                    value={selectedDeck}
                    onChange={(e) => setSelectedDeck(e.target.value)}
                    style={{
                      padding: '8px 12px',
                      border: '1px solid #d1d5db',
                      borderRadius: '6px',
                      fontSize: '14px'
                    }}
                  >
                    <option value="">Select a deck...</option>
                    {userDecks.map(deck => (
                      <option key={deck._id} value={deck._id}>
                        {deck.name}
                      </option>
                    ))}
                  </select>
                  <button
                    onClick={handleAddToDeck}
                    disabled={!selectedDeck || addingToDeck}
                    style={{
                      backgroundColor: selectedDeck ? '#3b82f6' : '#9ca3af',
                      color: 'white',
                      border: 'none',
                      padding: '12px 16px',
                      borderRadius: '8px',
                      fontSize: '14px',
                      fontWeight: '500',
                      cursor: selectedDeck ? 'pointer' : 'not-allowed',
                      transition: 'background-color 0.2s'
                    }}
                    onMouseEnter={(e) => {
                      if (selectedDeck) e.target.style.backgroundColor = '#2563eb';
                    }}
                    onMouseLeave={(e) => {
                      if (selectedDeck) e.target.style.backgroundColor = '#3b82f6';
                    }}
                  >
                    {addingToDeck ? 'Adding...' : '📚 Add to Deck'}
                  </button>
                </>
              )}

              {/* Login message if no user decks */}
              {(!userDecks || userDecks.length === 0) && (
                <div style={{
                  backgroundColor: '#f3f4f6',
                  padding: '12px',
                  borderRadius: '8px',
                  fontSize: '14px',
                  color: '#374151',
                  textAlign: 'center'
                }}>
                  {!userDecks ? 
                    'Log in to add cards to your decks' : 
                    'Create a deck first to add cards to it'
                  }
                </div>
              )}
            </div>
          </div>

          {/* Center Panel - Current Printing */}
          <div style={{
            flex: 1,
            padding: '24px',
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center'
          }}>
            {selectedPrinting && (
              <>
                {/* Card Image */}
                <div style={{ marginBottom: '16px' }}>
                  <img
                    src={selectedPrinting.image_uris?.normal || card.image_uris?.normal}
                    alt={selectedPrinting.name}
                    style={{
                      width: 'auto',
                      height: '400px',
                      maxWidth: '100%',
                      borderRadius: '8px',
                      border: isFoil ? '2px solid #fbbf24' : '1px solid #e5e7eb',
                      boxShadow: isFoil ? '0 0 20px rgba(251, 191, 36, 0.3)' : '0 4px 6px -1px rgba(0, 0, 0, 0.1)'
                    }}
                  />
                </div>

                {/* Card Details */}
                <div style={{ textAlign: 'center', maxWidth: '400px' }}>
                  {selectedPrinting.oracle_text && (
                    <div style={{ 
                      fontSize: '14px', 
                      lineHeight: '1.5', 
                      color: '#374151',
                      marginBottom: '16px',
                      padding: '12px',
                      backgroundColor: '#f9fafb',
                      borderRadius: '8px'
                    }}>
                      {selectedPrinting.oracle_text.split('\n').map((text, i) => (
                        <p key={i} style={{ margin: '0 0 8px 0' }}>
                          {renderOracleTextWithSymbols(text)}
                        </p>
                      ))}
                    </div>
                  )}
                  
                  <div style={{ fontSize: '14px', color: '#6b7280' }}>
                    {selectedPrinting.set_name} • {selectedPrinting.set?.toUpperCase()} 
                    {selectedPrinting.collector_number && ` #${selectedPrinting.collector_number}`}
                    {selectedPrinting.rarity && ` • ${selectedPrinting.rarity.charAt(0).toUpperCase() + selectedPrinting.rarity.slice(1)}`}
                  </div>
                </div>
              </>
            )}
          </div>

          {/* Right Panel - Printings List */}
          <div style={{
            width: '300px',
            borderLeft: '1px solid #e5e7eb',
            display: 'flex',
            flexDirection: 'column',
            flexShrink: 0
          }}>
            <div style={{ 
              padding: '24px 24px 16px 24px',
              borderBottom: '1px solid #e5e7eb'
            }}>
              <h3 style={{ margin: 0, fontSize: '16px', fontWeight: '600' }}>
                Select Printing
              </h3>
            </div>
            
            <div style={{ 
              flex: 1, 
              overflowY: 'auto',
              padding: '16px'
            }}>
              {loading ? (
                <div style={{ textAlign: 'center', padding: '20px' }}>
                  <div>Loading printings...</div>
                  <div style={{ 
                    margin: '10px auto',
                    width: '20px',
                    height: '20px',
                    border: '2px solid #e5e7eb',
                    borderTop: '2px solid #3b82f6',
                    borderRadius: '50%',
                    animation: 'spin 1s linear infinite'
                  }}></div>
                </div>
              ) : printings.length === 0 ? (
                <div style={{ textAlign: 'center', padding: '20px', color: '#6b7280' }}>
                  No printings found
                </div>
              ) : (
                <div style={{ display: 'flex', flexDirection: 'column', gap: '12px' }}>
                  {/* Reorder printings with selected first */}
                  {(() => {
                    const orderedPrintings = [];
                    if (selectedPrinting) {
                      orderedPrintings.push(selectedPrinting);
                    }
                    printings.forEach(p => {
                      if (!selectedPrinting || p.id !== selectedPrinting.id) {
                        orderedPrintings.push(p);
                      }
                    });
                    
                    return orderedPrintings.map((printing) => {
                      const isSelected = selectedPrinting?.id === printing.id;
                      const imageUrl = `https://api.scryfall.com/cards/${printing.id}?format=image&version=normal`;
                      
                      return (
                        <div
                          key={printing.id}
                          onClick={() => handleSelectPrinting(printing)}
                          style={{
                            padding: '8px',
                            border: isSelected ? '2px solid #3b82f6' : '1px solid #e5e7eb',
                            borderRadius: '8px',
                            cursor: 'pointer',
                            backgroundColor: isSelected ? '#eff6ff' : 'white',
                            transition: 'all 0.2s',
                            position: 'relative'
                          }}
                          onMouseEnter={(e) => {
                            if (!isSelected) {
                              e.target.style.backgroundColor = '#f9fafb';
                              e.target.style.borderColor = '#d1d5db';
                            }
                          }}
                          onMouseLeave={(e) => {
                            if (!isSelected) {
                              e.target.style.backgroundColor = 'white';
                              e.target.style.borderColor = '#e5e7eb';
                            }
                          }}
                        >
                          <img
                            src={imageUrl}
                            alt={`${printing.name} - ${printing.set?.toUpperCase()}`}
                            style={{
                              width: '100%',
                              height: 'auto',
                              maxHeight: '150px',
                              objectFit: 'contain',
                              borderRadius: '4px',
                              marginBottom: '8px'
                            }}
                            loading="lazy"
                          />
                          
                          {isSelected && (
                            <div style={{
                              position: 'absolute',
                              top: '12px',
                              right: '12px',
                              backgroundColor: '#3b82f6',
                              color: 'white',
                              padding: '2px 6px',
                              borderRadius: '4px',
                              fontSize: '10px',
                              fontWeight: '600'
                            }}>
                              CURRENT
                            </div>
                          )}
                          
                          <div style={{
                            fontSize: '12px',
                            textAlign: 'center',
                            display: 'flex',
                            justifyContent: 'space-between',
                            alignItems: 'center'
                          }}>
                            <span style={{ fontWeight: '500' }}>
                              {printing.set?.toUpperCase()}
                              {printing.collector_number && ` #${printing.collector_number}`}
                            </span>
                            {printing.prices?.usd && (
                              <span style={{ color: '#059669', fontSize: '11px' }}>
                                ${printing.prices.usd}
                              </span>
                            )}
                          </div>
                        </div>
                      );
                    });
                  })()}
                  
                  {/* Load More Button */}
                  {allPrintings.length > printings.length && (
                    <button
                      onClick={loadMorePrintings}
                      style={{
                        padding: '8px 16px',
                        background: '#3b82f6',
                        color: 'white',
                        border: 'none',
                        borderRadius: '6px',
                        cursor: 'pointer',
                        fontSize: '12px',
                        marginTop: '8px'
                      }}
                    >
                      Load More ({allPrintings.length - printings.length} remaining)
                    </button>
                  )}
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
      
      {/* Add keyframe animation for spinner */}
      <style>{`
        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }
      `}</style>
    </div>
  );
}

function SearchBar({ onSearch, loading, query, setQuery }) {
  const handleSubmit = (e) => {
    e.preventDefault();
    if (query.trim()) onSearch(query);
  };
  return (
    <form onSubmit={handleSubmit} style={{ marginBottom: 16, display: 'flex', gap: 8, flexWrap: 'wrap' }}>
      <input
        type="text"
        placeholder="Search cards (Scryfall syntax supported)"
        value={query}
        onChange={e => setQuery(e.target.value)}
        style={{ flex: 1, minWidth: 180, padding: 8, fontSize: 16, backgroundColor: 'white', border: '1px solid #ccc', borderRadius: 4 }}
        aria-label="Card search query"
        data-research-page-search="true"
      />
      <button type="submit" disabled={loading} style={{ minWidth: 100 }}>
        {loading ? 'Searching...' : 'Search'}
      </button>
    </form>
  );
}

function ManaCostSVG({ manaCost }) {
  if (!manaCost) return null;
  // Scryfall mana cost: e.g. "{1}{U}{U}", hybrids: "{W/U}", phyrexian: "{U/P}", etc.
  const symbols = manaCost.match(/\{.*?\}/g) || [];
  return (
    <span style={{ display: 'inline-flex', gap: 2, flexWrap: 'wrap', alignItems: 'center' }}>
      {symbols.map((sym, i) => {
        // Remove braces, slashes, and capitalize all letters, join for hybrids
        let code = sym.replace(/[{}]/g, '');
        code = code.replace(/\//g, '');
        code = code.toUpperCase();
        // Scryfall expects e.g. "WU" for {W/U}, "2U" for {2/U}, "UP" for {U/P}
        const url = `https://svgs.scryfall.io/card-symbols/${code}.svg`;
        return (
          <img
            key={i}
            src={url}
            alt={sym}
            style={{ width: 15, height: 15, verticalAlign: 'middle', marginRight: 1 }}
          />
        );
      })}
    </span>
  );
}

// Function to replace mana symbols in text with SVG images
function renderOracleTextWithSymbols(text) {
  if (!text) return null;
  
  const parts = text.split(/(\{[^}]+\})/);
  
  return (
    <span>
      {parts.map((part, index) => {
        if (part.match(/\{[^}]+\}/)) {
          // This is a mana symbol
          let code = part.replace(/[{}]/g, '');
          code = code.replace(/\//g, '');
          code = code.toUpperCase();
          
          const url = `https://svgs.scryfall.io/card-symbols/${code}.svg`;
          return (
            <img
              key={index}
              src={url}
              alt={part}
              style={{ 
                width: 12, 
                height: 12, 
                verticalAlign: 'middle', 
                margin: '0 1px',
                display: 'inline'
              }}
            />
          );
        } else {
          // Regular text
          return <span key={index}>{part}</span>;
        }
      })}
    </span>
  );
}

function SortAndViewControls({ sort, setSort, sortDir, setSortDir, view, setView }) {
  return (
    <div style={{ display: 'flex', gap: 16, alignItems: 'center', marginBottom: 16, flexWrap: 'wrap' }}>
      <label>
        Sort by:
        <select value={sort} onChange={e => setSort(e.target.value)} style={{ marginLeft: 8, backgroundColor: 'white', border: '1px solid #ccc', borderRadius: 4, padding: '4px 8px' }}>
          <option value="name">Name</option>
          <option value="type">Type</option>
          <option value="mana">Mana Value</option>
          <option value="price">Price</option>
        </select>
      </label>
      <div style={{ display: 'flex', gap: 4 }}>
        <button
          type="button"
          onClick={() => setSortDir('asc')}
          style={{
            background: sortDir === 'asc' ? '#1976d2' : '#eee',
            color: sortDir === 'asc' ? '#fff' : '#222',
            border: '1px solid #ccc',
            borderRadius: 4,
            padding: '4px 16px',
            fontWeight: 600,
            cursor: 'pointer',
          }}
        >
          A-Z
        </button>
        <button
          type="button"
          onClick={() => setSortDir('desc')}
          style={{
            background: sortDir === 'desc' ? '#1976d2' : '#eee',
            color: sortDir === 'desc' ? '#fff' : '#222',
            border: '1px solid #ccc',
            borderRadius: 4,
            padding: '4px 16px',
            fontWeight: 600,
            cursor: 'pointer',
          }}
        >
          Z-A
        </button>
      </div>
      <div style={{ display: 'flex', gap: 8 }}>
        <button
          type="button"
          onClick={() => setView('grid')}
          style={{ background: view === 'grid' ? '#1976d2' : '#eee', color: view === 'grid' ? '#fff' : '#222', border: '1px solid #ccc', borderRadius: 4, padding: '4px 12px' }}
        >
          Grid
        </button>
        <button
          type="button"
          onClick={() => setView('hybrid')}
          style={{ background: view === 'hybrid' ? '#1976d2' : '#eee', color: view === 'hybrid' ? '#fff' : '#222', border: '1px solid #ccc', borderRadius: 4, padding: '4px 12px' }}
        >
          Hybrid
        </button>
        <button
          type="button"
          onClick={() => setView('text')}
          style={{ background: view === 'text' ? '#1976d2' : '#eee', color: view === 'text' ? '#fff' : '#222', border: '1px solid #ccc', borderRadius: 4, padding: '4px 12px' }}
        >
          Text
        </button>
      </div>
    </div>
  );
}

function ResultsList({ results, error, view, sort, sortDir, setSort, setSortDir, handleSearch, onCardClick, flipStates, isDoubleFacedCard, getCardName, handleFlipCard, getCardImageUrl }) {
  if (error) return <div style={{ color: 'red', marginTop: 16 }}>{error}</div>;
  if (!results) return null;
  if (results.length === 0) return <div style={{ color: '#888', marginTop: 16 }}>No results found.</div>;
  
  if (view === 'text') {
    // Fix: handle sort toggling for columns
    const handleHeaderClick = (col) => {
      if (sort === col) {
        setSortDir(sortDir === 'asc' ? 'desc' : 'asc');
      } else {
        setSort(col);
        setSortDir('asc');
      }
    };
    return (
      <div style={{ marginTop: 24, flex: 1, display: 'flex', flexDirection: 'column' }}>
        <h3 style={{ marginBottom: 16 }}>Results</h3>
        <div style={{ flex: 1, overflowX: 'auto', overflowY: 'auto', padding: '0 16px' }}>
          <table style={{ width: '100%', minWidth: 600, borderCollapse: 'collapse', fontSize: 16, borderSpacing: 0 }}>
          <thead>
            <tr style={{ background: '#f2f2f2', height: 20, maxHeight: 20, lineHeight: 1, overflow: 'hidden' }}>
              <th
                style={{ textAlign: 'left', padding: '0 0 0 10px', borderBottom: '1px solid #ccc', borderRight: '1px solid #ccc', minWidth: 120, cursor: 'pointer', userSelect: 'none', height: 20, maxHeight: 20, verticalAlign: 'middle', fontWeight: 700, fontSize: 16, letterSpacing: 0.2, lineHeight: 1, overflow: 'hidden' }}
                onClick={() => handleHeaderClick('name')}
              >
                Name {sort === 'name' && (sortDir === 'asc' ? '▲' : '▼')}
              </th>
              <th
                style={{ textAlign: 'left', padding: '0 0 0 10px', borderBottom: '1px solid #ccc', borderRight: '1px solid #ccc', minWidth: 100, cursor: 'pointer', userSelect: 'none', height: 20, maxHeight: 20, verticalAlign: 'middle', fontWeight: 700, fontSize: 16, letterSpacing: 0.2, lineHeight: 1, overflow: 'hidden' }}
                onClick={() => handleHeaderClick('type')}
              >
                Type {sort === 'type' && (sortDir === 'asc' ? '▲' : '▼')}
              </th>
              <th
                style={{ textAlign: 'left', padding: '0 0 0 10px', borderBottom: '1px solid #ccc', borderRight: '1px solid #ccc', minWidth: 80, cursor: 'pointer', userSelect: 'none', height: 20, maxHeight: 20, verticalAlign: 'middle', fontWeight: 700, fontSize: 16, letterSpacing: 0.2, lineHeight: 1, overflow: 'hidden' }}
                onClick={() => handleHeaderClick('mana')}
              >
                Mana Value {sort === 'mana' && (sortDir === 'asc' ? '▲' : '▼')}
              </th>
              <th
                style={{ textAlign: 'left', padding: '0 0 0 10px', borderBottom: '1px solid #ccc', borderRight: '1px solid #ccc', minWidth: 70, cursor: 'pointer', userSelect: 'none', height: 20, maxHeight: 20, verticalAlign: 'middle', fontWeight: 700, fontSize: 16, letterSpacing: 0.2, lineHeight: 1, overflow: 'hidden' }}
                onClick={() => handleHeaderClick('price')}
              >
                Price {sort === 'price' && (sortDir === 'asc' ? '▲' : '▼')}
              </th>
              <th style={{ textAlign: 'center', padding: 0, borderBottom: '1px solid #ccc', minWidth: 32, height: 20, maxHeight: 20, verticalAlign: 'middle', fontWeight: 700, fontSize: 16, letterSpacing: 0.2, lineHeight: 1, overflow: 'hidden' }}>Actions</th>
            </tr>
          </thead>
          <tbody>
            {(results || []).map(card => {
              // Handle double-faced cards for mana cost display
              const isDoubleFaced = isDoubleFacedCard(card);
              let frontManaCost, backManaCost, allSymbols = [];
              
              if (isDoubleFaced && card.card_faces) {
                // For double-faced cards, get both sides
                frontManaCost = card.card_faces[0]?.mana_cost || '';
                backManaCost = card.card_faces[1]?.mana_cost || '';
                
                // Collect symbols from both sides for display
                const frontSymbols = frontManaCost.match(/\{.*?\}/g) || [];
                const backSymbols = backManaCost.match(/\{.*?\}/g) || [];
                allSymbols = [...frontSymbols, ...backSymbols];
              } else {
                frontManaCost = card.mana_cost || '';
                allSymbols = frontManaCost.match(/\{.*?\}/g) || [];
              }
              
              // Use front face mana cost for sorting (primary side)
              const symbols = frontManaCost.match(/\{.*?\}/g) || [];
              
              // Calculate mana value for sorting
              let manaValue = 0;
              symbols.forEach(sym => {
                const val = sym.replace(/[{}]/g, '');
                if (!isNaN(Number(val))) manaValue += Number(val);
                else if (val.match(/^[WUBRGCSXYZQ]$/i)) manaValue += 1;
                else if (val.match(/^2[WUBRG]$/i)) manaValue += 2; // e.g. {2R}
                else if (val.match(/\//)) manaValue += 1; // hybrid, phyrexian, etc.
              });
              
              // Use cmc/mana_value as fallback, preferring card face for double-faced cards
              if (!manaValue) {
                if (isDoubleFaced && card.card_faces?.[0]) {
                  manaValue = card.card_faces[0].cmc || card.card_faces[0].mana_value || card.cmc || card.mana_value || 0;
                } else {
                  manaValue = card.cmc || card.mana_value || 0;
                }
              }
              
              // Count each symbol for display
              const symbolCounts = {};
              symbols.forEach(sym => {
                let code = sym.replace(/[{}]/g, '');
                code = code.replace(/\//g, '');
                code = code.toUpperCase();
                symbolCounts[code] = (symbolCounts[code] || 0) + 1;
              });
              // Type: handle double-faced cards
              let typeDisplay = '';
              let typeLineToUse;
              
              if (isDoubleFaced && card.card_faces?.[0]) {
                // For double-faced cards, use the front face type line
                typeLineToUse = card.card_faces[0].type_line || card.type_line;
              } else {
                typeLineToUse = card.type_line;
              }
              
              if (typeLineToUse) {
                const parts = typeLineToUse.split('—').map(s => s.trim());
                if (parts.length === 2) typeDisplay = `${parts[0]} - ${parts[1]}`;
                else typeDisplay = parts[0];
              }
              // Extract price for display
              const { price } = extractPrice(card);
              const priceDisplay = price ? `$${Number(price).toFixed(2)}` : 'N/A';
              
              return (
                <tr key={card.id} style={{ height: 20, maxHeight: 20, lineHeight: 1, minHeight: 0, overflow: 'hidden' }}>
                  <td style={{ padding: '0 0 0 10px', borderBottom: '1px solid #eee', borderRight: '1px solid #eee', fontSize: 16, height: 20, maxHeight: 20, verticalAlign: 'middle', minHeight: 0, textAlign: 'left', lineHeight: 1 }}>
                    <CardPreview card={card} nameStyle={{ fontWeight: 700, color: '#4e8c6c', fontSize: 16, textDecoration: 'none', lineHeight: 1, margin: 0, padding: 0, cursor: 'pointer' }} isDoubleFacedCard={isDoubleFacedCard} />
                  </td>
                  <td style={{ padding: '0 0 0 10px', borderBottom: '1px solid #eee', borderRight: '1px solid #eee', fontSize: 15, height: 20, maxHeight: 20, verticalAlign: 'middle', minHeight: 0, textAlign: 'left', lineHeight: 1, overflow: 'hidden' }}>{typeDisplay}</td>
                  <td style={{ padding: '0 0 0 10px', borderBottom: '1px solid #eee', borderRight: '1px solid #eee', height: 20, maxHeight: 20, verticalAlign: 'middle', minHeight: 0, textAlign: 'left', lineHeight: 1, overflow: 'hidden' }}>
                    <span style={{ display: 'inline-flex', gap: 0, lineHeight: 1, alignItems: 'center', margin: 0, padding: 0, height: 20, maxHeight: 20, overflow: 'hidden' }}>
                      {isDoubleFaced && card.card_faces ? (
                        <>
                          {/* Front face mana symbols */}
                          {(frontManaCost.match(/\{.*?\}/g) || []).map((sym, i) => {
                            let code = sym.replace(/[{}]/g, '');
                            code = code.replace(/\//g, '');
                            code = code.toUpperCase();
                            return (
                              <img
                                key={`front-${i}`}
                                src={`https://svgs.scryfall.io/card-symbols/${code}.svg`}
                                alt={code}
                                style={{ width: 15, height: 15, verticalAlign: 'middle', margin: 0, padding: 0, display: 'block', maxHeight: 15, overflow: 'hidden' }}
                              />
                            );
                          })}
                          {/* Separator for double-faced cards */}
                          {(frontManaCost || backManaCost) && (
                            <span style={{ margin: '0 3px', fontSize: '12px', color: '#666' }}>//</span>
                          )}
                          {/* Back face mana symbols */}
                          {(backManaCost.match(/\{.*?\}/g) || []).map((sym, i) => {
                            let code = sym.replace(/[{}]/g, '');
                            code = code.replace(/\//g, '');
                            code = code.toUpperCase();
                            return (
                              <img
                                key={`back-${i}`}
                                src={`https://svgs.scryfall.io/card-symbols/${code}.svg`}
                                alt={code}
                                style={{ width: 15, height: 15, verticalAlign: 'middle', margin: 0, padding: 0, display: 'block', maxHeight: 15, overflow: 'hidden' }}
                              />
                            );
                          })}
                        </>
                      ) : (
                        /* Regular single-faced cards */
                        symbols.map((sym, i) => {
                          let code = sym.replace(/[{}]/g, '');
                          code = code.replace(/\//g, '');
                          code = code.toUpperCase();
                          return (
                            <img
                              key={i}
                              src={`https://svgs.scryfall.io/card-symbols/${code}.svg`}
                              alt={code}
                              style={{ width: 15, height: 15, verticalAlign: 'middle', margin: 0, padding: 0, display: 'block', maxHeight: 15, overflow: 'hidden' }}
                            />
                          );
                        })
                      )}
                    </span>
                  </td>
                  <td style={{ padding: '0 0 0 10px', borderBottom: '1px solid #eee', borderRight: '1px solid #eee', fontSize: 14, height: 20, maxHeight: 20, verticalAlign: 'middle', minHeight: 0, textAlign: 'left', lineHeight: 1, overflow: 'hidden', color: price ? '#059669' : '#666', fontWeight: price ? '600' : 'normal' }}>
                    {priceDisplay}
                  </td>
                  <td style={{ padding: 0, borderBottom: '1px solid #eee', textAlign: 'center', height: 20, maxHeight: 20, verticalAlign: 'middle', minHeight: 0, lineHeight: 1, overflow: 'hidden' }}>
                    <button 
                      onClick={() => onCardClick(card)}
                      style={{
                        background: 'none',
                        border: 'none',
                        color: '#1976d2',
                        fontSize: 16,
                        cursor: 'pointer',
                        padding: 0,
                        lineHeight: 1,
                        width: 20,
                        height: 20,
                        maxHeight: 20,
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        margin: '0 auto',
                        overflow: 'hidden',
                      }} 
                      title="Card Actions"
                    >
                      ⚙️
                    </button>
                  </td>
                </tr>
              );
            })}
          </tbody>
        </table>
        </div>
      </div>
    );
  }
  if (view === 'hybrid') {
    return (
      <div style={{ marginTop: 24, flex: 1, display: 'flex', flexDirection: 'column' }}>
        <h3 style={{ textAlign: 'left', marginLeft: 16, marginBottom: 16 }}>Results</h3>
        <div style={{ flex: 1, overflowY: 'auto', padding: '0 16px' }}>
          <div style={{ 
            display: 'grid', 
            gridTemplateColumns: 'repeat(auto-fit, minmax(600px, 1fr))', 
            gap: '16px',
            maxWidth: '100%'
          }}>
            {results.map(card => {
              const { price } = extractPrice(card);
              const priceDisplay = price ? `$${Number(price).toFixed(2)}` : 'N/A';
              const cardId = card.scryfall_id || card.id;
              const isFlipped = flipStates.get(cardId) || false;
              const isDoubleFaced = isDoubleFacedCard(card);
              const displayName = getCardName(card, cardId, isFlipped);
              
              // For hybrid view, we prefer art_crop but fall back to normal if art_crop not available
              let imageUrl;
              if (isDoubleFaced) {
                const faceIndex = isFlipped ? 1 : 0;
                const face = card.card_faces?.[faceIndex];
                imageUrl = face?.image_uris?.art_crop || face?.image_uris?.normal || 
                          card.image_uris?.art_crop || card.image_uris?.normal;
              } else {
                imageUrl = card.image_uris?.art_crop || card.image_uris?.normal;
              }
              
              return (
                <div key={card.id} style={{
                  display: 'flex',
                  flexDirection: 'row',
                  alignItems: 'stretch',
                  borderBottom: '1px solid #eee',
                  padding: '20px',
                  background: '#fff',
                  borderRadius: 8,
                  boxShadow: '0 1px 4px rgba(0,0,0,0.03)',
                  minHeight: '205px',
                  border: '1px solid #e5e7eb'
                }}>
                  <div style={{ position: 'relative' }}>
                    {imageUrl && (
                      <img 
                        src={imageUrl} 
                        alt={displayName} 
                        style={{ 
                          width: '200px',
                          height: '205px',
                          objectFit: 'cover', 
                          borderRadius: 6, 
                          flexShrink: 0, 
                          marginRight: 20,
                          cursor: 'pointer'
                        }}
                        onClick={() => onCardClick(card)}
                      />
                    )}
                    
                    {/* Price and transform button overlay at bottom center */}
                    <div style={{
                      position: 'absolute',
                      bottom: '4px',
                      left: '50%',
                      transform: 'translateX(-50%)',
                      display: 'flex',
                      alignItems: 'center',
                      gap: '8px',
                      backgroundColor: 'rgba(0, 0, 0, 0.8)',
                      color: 'white',
                      padding: '3px 8px',
                      borderRadius: '4px',
                      backdropFilter: 'blur(4px)'
                    }}>
                      <span style={{
                        fontSize: '14px',
                        fontWeight: '600'
                      }}>
                        {priceDisplay}
                      </span>
                      {isDoubleFaced && (
                        <button
                          onClick={(e) => {
                            e.stopPropagation();
                            handleFlipCard(cardId);
                          }}
                          style={{
                            backgroundColor: 'transparent',
                            color: 'white',
                            border: 'none',
                            padding: '2px',
                            cursor: 'pointer',
                            display: 'flex',
                            alignItems: 'center',
                            justifyContent: 'center',
                            borderRadius: '2px'
                          }}
                          title={`Flip to ${isFlipped ? 'front' : 'back'} face`}
                        >
                          <TransformIcon size={12} color="white" />
                        </button>
                      )}
                    </div>
                  </div>
                  <div style={{ 
                    flex: 1, 
                    minWidth: 0, 
                    textAlign: 'left', 
                    display: 'flex', 
                    flexDirection: 'column', 
                    justifyContent: 'flex-start',
                    height: '205px',
                    padding: '8px 0'
                  }}>
                  {/* Row 1: Card name and mana cost */}
                  <div style={{ display: 'flex', alignItems: 'center', gap: 12, marginBottom: 4 }}>
                    <span 
                      style={{ fontWeight: 600, fontSize: 17, letterSpacing: 0.5, cursor: 'pointer' }}
                      onClick={() => onCardClick(card)}
                    >
                      {displayName}
                      {isDoubleFaced && (
                        <span 
                          onClick={(e) => {
                            e.stopPropagation();
                            handleFlipCard(cardId);
                          }}
                          style={{
                            marginLeft: '8px',
                            cursor: 'pointer',
                            userSelect: 'none',
                            display: 'inline-flex',
                            alignItems: 'center',
                            verticalAlign: 'middle'
                          }}
                          title={`Flip to ${isFlipped ? 'front' : 'back'} face`}
                        >
                          <TransformIcon size={12} color="#1976d2" />
                        </span>
                      )}
                    </span>
                    <span style={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                      <ManaCostSVG manaCost={(() => {
                        if (isDoubleFaced) {
                          const faceIndex = isFlipped ? 1 : 0;
                          const face = card.card_faces?.[faceIndex];
                          return face?.mana_cost || card.mana_cost;
                        }
                        return card.mana_cost;
                      })()} />
                    </span>
                  </div>
                  
                  {/* Row 2: Card type */}
                  <div style={{ marginBottom: 4 }}>
                    <span style={{ fontSize: 14, color: '#374151', fontWeight: 500 }}>
                      {(() => {
                        if (isDoubleFaced) {
                          const faceIndex = isFlipped ? 1 : 0;
                          const face = card.card_faces?.[faceIndex];
                          return face?.type_line || card.type_line;
                        }
                        return card.type_line;
                      })()}
                    </span>
                  </div>
                  
                  {/* Row 3: Artist */}
                  <div style={{ display: 'flex', alignItems: 'center', gap: 8, marginBottom: 6, flexWrap: 'wrap' }}>
                    <span style={{ fontSize: 14, color: '#6b7280' }}>Artist:</span>
                    <a
                      href="#"
                      style={{ fontSize: 14, color: '#1976d2', textDecoration: 'underline', cursor: 'pointer' }}
                      onClick={e => { e.preventDefault(); handleSearch(`artist:"${card.artist}"`); }}
                    >
                      {card.artist}
                    </a>
                  </div>
                  
                  {/* Row 4: Oracle text */}
                  <div style={{ flex: 1, minWidth: 0 }}>
                    <span style={{ 
                      display: 'block', 
                      whiteSpace: 'normal', 
                      wordBreak: 'break-word', 
                      lineHeight: 1.4, 
                      fontSize: 14, 
                      color: '#374151' 
                    }}>
                      {(() => {
                        let oracleText;
                        if (isDoubleFaced) {
                          const faceIndex = isFlipped ? 1 : 0;
                          const face = card.card_faces?.[faceIndex];
                          oracleText = face?.oracle_text || card.oracle_text || '';
                        } else {
                          oracleText = card.oracle_text || '';
                        }
                        return renderOracleTextWithSymbols(oracleText.replace(/\n/g, ' '));
                      })()}
                    </span>
                  </div>
                </div>
              </div>
              );
            })}
          </div>
        </div>
      </div>
    );
  }
  // grid view
  if (view === 'grid') {
    return (
      <div style={{ marginTop: 24, flex: 1, display: 'flex', flexDirection: 'column' }}>
        <h3 style={{ marginBottom: 16 }}>Results</h3>
        <div style={{ flex: 1, overflowY: 'auto', padding: '0 16px' }}>
          <div style={{ display: 'flex', flexWrap: 'wrap', gap: 8, justifyContent: 'flex-start' }}>
            {results.map(card => {
              const { price } = extractPrice(card);
              const priceDisplay = price ? `$${Number(price).toFixed(2)}` : 'N/A';
              const cardId = card.scryfall_id || card.id;
              const isFlipped = flipStates.get(cardId) || false;
              const isDoubleFaced = isDoubleFacedCard(card);
              const imageUrl = getCardImageUrl(card, cardId, isFlipped);
              const displayName = getCardName(card, cardId, isFlipped);
              
              return (
                <div key={card.id} style={{ padding: 8, width: 200, borderRadius: 6, background: '#fafbfc', display: 'flex', flexDirection: 'column', alignItems: 'center', position: 'relative' }}>
                  <div style={{ position: 'relative', width: '100%' }}>
                    {imageUrl && (
                      <img 
                        src={imageUrl} 
                        alt={displayName} 
                        style={{ 
                          width: '100%', 
                          maxWidth: 184, 
                          height: 'auto', 
                          aspectRatio: '63/88', 
                          objectFit: 'cover', 
                          borderRadius: 4,
                          cursor: 'pointer'
                        }}
                        onClick={() => onCardClick(card)}
                      />
                    )}
                    
                    {/* Price and transform button overlay at bottom center */}
                    <div style={{
                      position: 'absolute',
                      bottom: '4px',
                      left: '50%',
                      transform: 'translateX(-50%)',
                      display: 'flex',
                      alignItems: 'center',
                      gap: '6px',
                      backgroundColor: 'rgba(0, 0, 0, 0.8)',
                      color: 'white',
                      padding: '2px 6px',
                      borderRadius: '4px',
                      backdropFilter: 'blur(4px)'
                    }}>
                      <span style={{
                        fontSize: '12px',
                        fontWeight: '600'
                      }}>
                        {priceDisplay}
                      </span>
                      {isDoubleFaced && (
                        <button
                          onClick={(e) => {
                            e.stopPropagation();
                            handleFlipCard(cardId);
                          }}
                          style={{
                            backgroundColor: 'transparent',
                            color: 'white',
                            border: 'none',
                            padding: '1px',
                            cursor: 'pointer',
                            display: 'flex',
                            alignItems: 'center',
                            justifyContent: 'center',
                            borderRadius: '2px'
                          }}
                          title={`Flip to ${isFlipped ? 'front' : 'back'} face`}
                        >
                          <TransformIcon size={10} color="white" />
                        </button>
                      )}
                    </div>
                  </div>
                  <div style={{ marginTop: 8, display: 'flex', gap: 4, width: '100%' }}>
                    <button
                      onClick={() => addToShoppingCart(card)}
                      style={{
                        flex: 1,
                        backgroundColor: '#059669',
                        color: 'white',
                        border: 'none',
                        padding: '6px 8px',
                        borderRadius: '4px',
                        fontSize: '12px',
                        cursor: 'pointer'
                      }}
                      title="Add to Shopping Cart"
                    >
                      🛒
                    </button>
                    <button
                      onClick={() => onCardClick(card)}
                      style={{
                        flex: 1,
                        backgroundColor: '#3b82f6',
                        color: 'white',
                        border: 'none',
                        padding: '6px 8px',
                        borderRadius: '4px',
                        fontSize: '12px',
                        cursor: 'pointer'
                      }}
                      title="Add to Deck"
                    >
                      📚
                    </button>
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      </div>
    );
  }
}

export default function ResearchPage() {
  const [results, setResults] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [sort, setSort] = useState('name');
  const [sortDir, setSortDir] = useState('asc');
  const [view, setView] = useState('hybrid');
  const [searchQuery, setSearchQuery] = useState('');
  
  // Modal state and user decks
  const [selectedCard, setSelectedCard] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const [userDecks, setUserDecks] = useState(null);
  
  // Flip states for double-faced cards in grid/hybrid views
  const [flipStates, setFlipStates] = useState(new Map());

  // Helper function to check if a card is double-faced
  const isDoubleFacedCard = (card) => {
    const cardFaces = card.card_faces;
    const layout = card.layout;
    
    const isTransformCard = layout === 'transform' || 
                           layout === 'modal_dfc' || 
                           layout === 'reversible_card';
                           
    return (cardFaces && Array.isArray(cardFaces) && cardFaces.length >= 2) || isTransformCard;
  };

  // Helper function to get the correct image URL for a card (accounting for flip state)
  const getCardImageUrl = (card, cardId, isFlipped = false) => {
    if (isDoubleFacedCard(card)) {
      const faceIndex = isFlipped ? 1 : 0;
      const face = card.card_faces?.[faceIndex];
      
      // Try to get image from the specific face
      let imageUrl = face?.image_uris?.normal || face?.image_uris?.small;
      
      // If face doesn't have image_uris (like Room cards), use main card image
      if (!imageUrl) {
        imageUrl = card.image_uris?.normal || card.image_uris?.small;
      }
      
      return imageUrl;
    } else {
      // Single-faced card
      return card.image_uris?.normal || card.image_uris?.small;
    }
  };

  // Helper function to get the correct card name (accounting for flip state)
  const getCardName = (card, cardId, isFlipped = false) => {
    if (isDoubleFacedCard(card)) {
      const faceIndex = isFlipped ? 1 : 0;
      const face = card.card_faces?.[faceIndex];
      return face?.name || card.name;
    } else {
      return card.name;
    }
  };

  // Helper function to handle card flipping
  const handleFlipCard = (cardId) => {
    setFlipStates(prev => {
      const newMap = new Map(prev);
      newMap.set(cardId, !prev.get(cardId));
      return newMap;
    });
  };

  // Load user decks on component mount
  useEffect(() => {
    const loadUserDecks = async () => {
      try {
        const token = localStorage.getItem('token');
        if (!token) {
          setUserDecks(null);
          return;
        }

        const apiUrl = import.meta.env.VITE_API_URL;
        const response = await fetch(`${apiUrl || ''}/api/decks/mine`, {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });

        if (response.ok) {
          const decks = await response.json();
          setUserDecks(decks);
        } else {
          setUserDecks(null);
        }
      } catch (error) {
        console.error('Error loading user decks:', error);
        setUserDecks(null);
      }
    };

    loadUserDecks();
  }, []);

  const handleCardClick = (card) => {
    setSelectedCard(card);
    setShowModal(true);
  };

  const handleCloseModal = () => {
    setShowModal(false);
    setSelectedCard(null);
  };

  const handleSearch = async (query) => {
    setLoading(true);
    setError('');
    setResults(null);
    setSearchQuery(query);
    try {
      const apiUrl = import.meta.env.VITE_API_URL;
      const isDev = import.meta.env.DEV;
      
      // Use the same endpoint as DeckViewEdit for consistency
      const url = `/api/cards/search?q=${encodeURIComponent(query)}`;
      const finalUrl = isDev ? url : `${apiUrl}${url}`;
      
      const res = await fetch(finalUrl);
      if (!res.ok) {
        throw new Error(`HTTP error! status: ${res.status}`);
      }
      
      const data = await res.json();
      
      if (data.data) {
        setResults(data.data);
      } else if (Array.isArray(data)) {
        setResults(data);
      } else {
        setResults([]);
      }
      
      if (data.data && data.data.length === 0) {
        setError('No cards found matching your search criteria.');
      }
    } catch (err) {
      console.error('Search error:', err);
      setError('Error fetching cards. Please try again.');
      setResults([]);
    }
    setLoading(false);
  };

  // Improved client-side sort with direction
  const sortedResults = results ? [...results].sort((a, b) => {
    let cmp = 0;
    if (sort === 'name') cmp = a.name.localeCompare(b.name);
    else if (sort === 'type') cmp = (a.type_line || '').localeCompare(b.type_line || '');
    else if (sort === 'mana') {
      // Use the same mana value logic as above
      const getManaValue = card => {
        const manaCost = card.mana_cost || '';
        const symbols = manaCost.match(/\{.*?\}/g) || [];
        let manaValue = 0;
        symbols.forEach(sym => {
          const val = sym.replace(/[{}]/g, '');
          if (!isNaN(Number(val))) manaValue += Number(val);
          else if (val.match(/^[WUBRGCSXYZQ]$/i)) manaValue += 1;
          else if (val.match(/^2[WUBRG]$/i)) manaValue += 2;
          else if (val.match(/\//)) manaValue += 1;
        });
        if (!manaValue && (card.cmc || card.mana_value)) manaValue = card.cmc || card.mana_value;
        return manaValue;
      };
      cmp = getManaValue(a) - getManaValue(b);
    }
    else if (sort === 'price') {
      // Sort by price, handling null values
      const getPriceValue = card => {
        const { price } = extractPrice(card);
        return price ? Number(price) : 0;
      };
      const priceA = getPriceValue(a);
      const priceB = getPriceValue(b);
      cmp = priceA - priceB;
    }
    if (sortDir === 'desc') cmp *= -1;
    return cmp;
  }) : null;

  return (
    <div className="container" style={{ 
      maxWidth: '100%', 
      width: '100%', 
      padding: '1rem', 
      boxSizing: 'border-box',
      minHeight: 'calc(100vh - 120px)',
      display: 'flex',
      flexDirection: 'column'
    }}>
      <h1 style={{ marginBottom: '1rem', flexShrink: 0 }}>Research</h1>
      <div style={{ flexShrink: 0, marginBottom: '1rem' }}>
        <SearchBar onSearch={handleSearch} loading={loading} query={searchQuery} setQuery={setSearchQuery} />
        <SortAndViewControls sort={sort} setSort={setSort} sortDir={sortDir} setSortDir={setSortDir} view={view} setView={setView} />
      </div>
      <div style={{ flex: 1, display: 'flex', flexDirection: 'column', minHeight: 0 }}>
        <ResultsList
          results={sortedResults}
          error={error}
          view={view}
          handleSearch={q => { setSearchQuery(q); handleSearch(q); }}
          sort={sort}
          sortDir={sortDir}
          setSort={setSort}
          setSortDir={setSortDir}
          onCardClick={handleCardClick}
          flipStates={flipStates}
          isDoubleFacedCard={isDoubleFacedCard}
          getCardName={getCardName}
          handleFlipCard={handleFlipCard}
          getCardImageUrl={getCardImageUrl}
        />
      </div>
      
      {/* Card Actions Modal */}
      <CardActionsModal
        card={selectedCard}
        isOpen={showModal}
        onClose={handleCloseModal}
        userDecks={userDecks}
      />
    </div>
  );
}
